if (!state %in% uniqueStates) {
stop("invalid state")
}
## we subset the dataframe to the requested state
stateSubset <- subset(outcomeOfCare, State == state)
## we identify the best rate
##bestRate <- min(stateSubset[, rateCol], na.rm = TRUE)
## We identify the best hospital (lowest 30-day death rate)
bestHosp <- c(subset(stateSubset, stateSubset[[rateCol]] == bestRate, select = Hospital.Name))
c <- sort(as.vector(bestHosp$Hospital.Name))
c
c[1]
c[2]
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/best.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/best.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/best.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/best.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
## test parameters
state <- "TX"
outcome <- "heart attack"
##bestRate <- 12.9
## Check that outcome is valid
if (outcome == "heart attack"){
rateCol <- 11
} else if (outcome == "heart failure"){
rateCol <- 17
} else if (outcome =="pneumonia"){
rateCol <- 23
} else {
stop("invalid outcome")
}
## Read outcome data
outcomeOfCare <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## The selected rate column is converted to numeric
outcomeOfCare[, rateCol] <- suppressWarnings(as.numeric(outcomeOfCare[, rateCol]))
## Check that state is valid
uniqueStates <- unique(outcomeOfCare[, 7])
if (!state %in% uniqueStates) {
stop("invalid state")
}
## we subset the dataframe to the requested state
stateSubset <- subset(outcomeOfCare, State == state)
stateSubset
?order
?rank
rank(stateSubset)
stateSubset<- rank(stateSubset[, C(2, rateCol)])
stateSubset<- rank(stateSubset, stateSubset[, C(2, rateCol)])
stateSubset[, C(2, rateCol)]
stateSubset[, c(2, rateCol)
stateSubset<- rank(stateSubset, stateSubset[, c(2, rateCol)])
rank(stateSubset, stateSubset[, c(2, rateCol)])
stateSubset <- subset(outcomeOfCare, State == state)
)
head(stateSubset)
head(stateSubset[, c(2, rateCol)])
stateSubset <- subset(outcomeOfCare, State == state, select = c(Hospital.Name, stateSubset[[rateCol]])
stateSubset
head(stateSubset[, c(2, rateCol)])
stateSubset <- outcomeOfCare[outcomeOfCare$State == state, c(Hospital.Name, stateSubset[[rateCol]]
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
stateSubset <- outcomeOfCare[outcomeOfCare$State == state, c(Hospital.Name, rateCol]
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
stateSubset <- outcomeOfCare[outcomeOfCare$State == state, c(Hospital.Name, rateCol)]
stateSubset <- subset(outcomeOfCare, State == state, select = c(Hospital.Name, stateSubset[[rateCol]])
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
stateSubset <- outcomeOfCare[outcomeOfCare$State == state, c(Hospital.Name, rateCol)]
stateSubset
colNames(stateSubset)
names(stateSubset)
names(stateSubset) <- outcomeOfCare[outcomeOfCare$State == state, c("Hospital.Name", rateCol)]
stateSubset <- outcomeOfCare[outcomeOfCare$State == state, c("Hospital.Name", rateCol)]
outcomeOfCare[outcomeOfCare$State == state, c("Hospital.Name", rateCol)]
stateSubset <- outcomeOfCare[outcomeOfCare$State == state]
stateSubset <- subset(outcomeOfCare, State == state, select = Hospital.Name)
stateSubset
stateSubset <- subset(outcomeOfCare, State == state, select = c(Hospital.Name)
stateSubset <- subset(outcomeOfCare, State == state, select = c(Hospital.Name))
stateSubset
stateSubset <- subset(outcomeOfCare, State == state, select = c(Hospital.Name, [[2]]))
stateSubset <- subset(outcomeOfCare, State == state, select = c(Hospital.Name, rateCol))
stateSubset
head(stateSubset)
stateSubset[2]
class(stateSubset[2])
class(stateSubset[,2])
orderedStateSubset <- order(stateSubset[2], stateSubset$Hospital.Name, na.last = NA)
orderedStateSubset
as.character(stateSubset$Hospital.Name[ordered_data_for_state[1]])
as.character(stateSubset$Hospital.Name[orderedStateSubset[1]])
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
as.character(stateSubset$Hospital.Name[orderedStateSubset[length(orderedStateSubse)]])
as.character(stateSubset$Hospital.Name[orderedStateSubset[length(orderedStateSubset)]])
num <- 4
as.character(stateSubset$Hospital.Name[orderedStateSubset[num]])
outcome <- "heart failure"
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
as.character(stateSubset$Hospital.Name[orderedStateSubset[num]])
state <- "TX"
outcome <- "heart failure"
num <- 4
as.character(stateSubset$Hospital.Name[orderedStateSubset[num]])
## Check that outcome is valid
if (outcome == "heart attack"){
rateCol <- 11
} else if (outcome == "heart failure"){
rateCol <- 17
} else if (outcome =="pneumonia"){
rateCol <- 23
} else {
stop("invalid outcome")
}
## Read outcome data
outcomeOfCare <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## The selected rate column is converted to numeric
outcomeOfCare[, rateCol] <- suppressWarnings(as.numeric(outcomeOfCare[, rateCol]))
## Check that state is valid
uniqueStates <- unique(outcomeOfCare[, 7])
if (!state %in% uniqueStates) {
stop("invalid state")
}
## we subset the dataframe to the requested state
stateSubset <- subset(outcomeOfCare, State == state, select = c(Hospital.Name, rateCol))
orderedStateSubset <- order(stateSubset[2], stateSubset$Hospital.Name, na.last = NA)
as.character(stateSubset$Hospital.Name[orderedStateSubset[num]])
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
?split.data.frame
splitoutcomeOfCare <- split.data.frame(outcomeOfCare, State)
outcome <- "heart failure"
##num <- 4
## Check that outcome is valid
if (outcome == "heart attack"){
rateCol <- 11
} else if (outcome == "heart failure"){
rateCol <- 17
} else if (outcome =="pneumonia"){
rateCol <- 23
} else {
stop("invalid outcome")
}
## Read outcome data
outcomeOfCare <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## The selected rate column is converted to numeric
outcomeOfCare[, rateCol] <- suppressWarnings(as.numeric(outcomeOfCare[, rateCol]))
splitoutcomeOfCare <- split.data.frame(outcomeOfCare, State)
splitoutcomeOfCare <- split.data.frame(outcomeOfCare, outcomeOfCare$State)
splitoutcomeOfCare
head(splitoutcomeOfCare[, outcomeOfCare$Hospital.Name])
head(splitoutcomeOfCare[, outcomeOfCare$Hospital.Name], 10)
head(splitoutcomeOfCare[, 2], 10)
head(splitoutcomeOfCare[1, 2], 10)
str(splitoutcomeOfCare)
summary(splitoutcomeOfCare)
split.data.frame(outcomeOfCare, outcomeOfCare$State)
outcomeOfCareSubset <- subset(outcomeOfCare, select = c(Hospital.Name, rateCol))
head(outcomeOfCareSubse)
head(outcomeOfCareSubset)
orderedoutcomeOfCareSubset <- order(outcomeOfCareSubset, outcomeOfCareSubset[, 2], outcomeOfCareSubset$Hospital.Name, na.last = NA)
orderedoutcomeOfCareSubset <- order(outcomeOfCareSubset[2], outcomeOfCareSubset$Hospital.Name, na.last = NA)
head(orderedoutcomeOfCareSubset)
head(outcomeOfCareSubset)
state <- "TX"
outcome <- "heart failure"
num <- 4
## Check that outcome is valid
if (outcome == "heart attack"){
rateCol <- 11
} else if (outcome == "heart failure"){
rateCol <- 17
} else if (outcome =="pneumonia"){
rateCol <- 23
} else {
stop("invalid outcome")
}
## Read outcome data
outcomeOfCare <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## The selected rate column is converted to numeric
outcomeOfCare[, rateCol] <- suppressWarnings(as.numeric(outcomeOfCare[, rateCol]))
## Check that state is valid
uniqueStates <- unique(outcomeOfCare[, 7])
if (!state %in% uniqueStates) {
stop("invalid state")
}
## we subset the dataframe to the requested state
stateSubset <- subset(outcomeOfCare, State == state, select = c(Hospital.Name, rateCol))
stateSubset
orderedStateSubset <- order(stateSubset[2], stateSubset$Hospital.Name, na.last = NA)
orderedStateSubset
stateSubset[2]
stateSubset$Hospital.Name
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
outcome <- "heart failure"
## Check that outcome is valid
if (outcome == "heart attack"){
rateCol <- 11
} else if (outcome == "heart failure"){
rateCol <- 17
} else if (outcome =="pneumonia"){
rateCol <- 23
} else {
stop("invalid outcome")
}
## Read outcome data
outcomeOfCare <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## The selected rate column is converted to numeric
outcomeOfCare[, rateCol] <- suppressWarnings(as.numeric(outcomeOfCare[, rateCol]))
## We subset the vector to contain only the hospital name and the selected rate
outcomeOfCareSubset <- subset(outcomeOfCare, select = c(Hospital.Name, rateCol))
orderedoutcomeOfCareSubset <- order(outcomeOfCareSubset[2], outcomeOfCareSubset$Hospital.Name, na.last = NA)
rankhospital("MD", "heart attack", "worst")
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
lapply(splitoutcomeOfCare, function(x) as.character(stateSubset$Hospital.Name[orderedStateSubset[1]]))
## we split the dataframe by state
splitoutcomeOfCare <- split.data.frame(outcomeOfCare, outcomeOfCare$State)
lapply(splitoutcomeOfCare, function(x) as.character(stateSubset$Hospital.Name[orderedStateSubset[1]]))
?rank
lapply(split.data.frame(outcomeOfCare, outcomeOfCare$State), rank(outcomeOfCareSubset, na.last = NA)
n <- lapply(split.data.frame(outcomeOfCare, outcomeOfCare$State), rank(outcomeOfCareSubset, na.last = NA)
n <- lapply(split.data.frame(outcomeOfCare, outcomeOfCare$State), rank(outcomeOfCareSubset, na.last = NA))
n <- lapply(split.data.frame(outcomeOfCare, outcomeOfCare$State), rank, outcomeOfCareSubset))
n <- lapply(split.data.frame(outcomeOfCare, outcomeOfCare$State), rank)
n
summary(splitoutcomeOfCare)
splitoutcomeOfCare$Hospital.Name
outcomeOfCareSubset <- subset(outcomeOfCare, select = c(Hospital.Name, rateCol))
head(outcomeOfCareSubset)
splitoutcomeOfCare <- split.data.frame(outcomeOfCare, outcomeOfCare$State)
summary(splitoutcomeOfCare)
(splitoutcomeOfCare)
splitoutcomeOfCare <- split.data.frame(outcomeOfCareSubset, outcomeOfCareSubset$State)
outcomeOfCareSubset <- subset(outcomeOfCare, select = c(Hospital.Name, State, rateCol))
splitoutcomeOfCare <- split.data.frame(outcomeOfCareSubset, outcomeOfCareSubset$State)
head(splitoutcomeOfCare)
head(splitoutcomeOfCare, 10)
orderedoutcomeOfCareSubset <- order(splitoutcomeOfCare[3], outcomeOfCareSubset$Hospital.Name, na.last = NA)
orderedoutcomeOfCareSubset <- order(splitoutcomeOfCare[3], splitoutcomeOfCare$Hospital.Name, na.last = NA)
orderedoutcomeOfCareSubset <- order(splitoutcomeOfCare[3], splitoutcomeOfCare$Hospital.Name, na.last = NA)
splitoutcomeOfCare[3]
splitoutcomeOfCare[2]
splitoutcomeOfCare[3]
state <- "TX"
outcome <- "heart failure"
num <- 4
##bestRate <- 12.9
## Check that outcome is valid
if (outcome == "heart attack"){
rateCol <- 11
} else if (outcome == "heart failure"){
rateCol <- 17
} else if (outcome =="pneumonia"){
rateCol <- 23
} else {
stop("invalid outcome")
}
## Read outcome data
outcomeOfCare <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## The selected rate column is converted to numeric
outcomeOfCare[, rateCol] <- suppressWarnings(as.numeric(outcomeOfCare[, rateCol]))
## Check that state is valid
uniqueStates <- unique(outcomeOfCare[, 7])
if (!state %in% uniqueStates) {
stop("invalid state")
}
## we subset the dataframe to the requested state
stateSubset <- subset(outcomeOfCare, State == state, select = c(Hospital.Name, rateCol))
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
state <- "TX"
outcome <- "heart failure"
num <- 4
##bestRate <- 12.9
## Check that outcome is valid
if (outcome == "heart attack"){
rateCol <- 11
} else if (outcome == "heart failure"){
rateCol <- 17
} else if (outcome =="pneumonia"){
rateCol <- 23
} else {
stop("invalid outcome")
}
## Read outcome data
outcomeOfCare <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## The selected rate column is converted to numeric
outcomeOfCare[, rateCol] <- suppressWarnings(as.numeric(outcomeOfCare[, rateCol]))
## Check that state is valid
uniqueStates <- unique(outcomeOfCare[, 7])
if (!state %in% uniqueStates) {
stop("invalid state")
}
## we subset the dataframe to the requested state
stateSubset <- subset(outcomeOfCare, State == state, select = c(Hospital.Name, rateCol))
stateSubset[2]
stateSubset$Hospital.Name
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
outcome <- "heart failure"
##num <- 4
## Check that outcome is valid
if (outcome == "heart attack"){
rateCol <- 11
} else if (outcome == "heart failure"){
rateCol <- 17
} else if (outcome =="pneumonia"){
rateCol <- 23
} else {
stop("invalid outcome")
}
## Read outcome data
outcomeOfCare <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## The selected rate column is converted to numeric
outcomeOfCare[, rateCol] <- suppressWarnings(as.numeric(outcomeOfCare[, rateCol]))
## We subset the vector to contain only the hospital name and the selected rate
outcomeOfCareSubset <- subset(outcomeOfCare, select = c(Hospital.Name, State, rateCol))
## we split the dataframe by state
splitoutcomeOfCare <- split.data.frame(outcomeOfCareSubset, outcomeOfCareSubset$State)
head(splitoutcomeOfCare, 10)
splitoutcomeOfCare[, 3]
splitoutcomeOfCare$Hospital.Name
splitoutcomeOfCare[[, 3]]
splitoutcomeOfCare[[3]]
splitoutcomeOfCare[[, 3]]
splitoutcomeOfCare$Hospital.Name
orderedoutcomeOfCareSubset <- order([3], outcomeOfCareSubset$Hospital.Name, na.last = NA)
orderedoutcomeOfCareSubset <- order(outcomeOfCareSubset[3], outcomeOfCareSubset$Hospital.Name, na.last = NA)
head(orderedoutcomeOfCareSubset)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
outcome <- "heart failure"
##num <- 4
## Check that outcome is valid
if (outcome == "heart attack"){
rateCol <- 11
} else if (outcome == "heart failure"){
rateCol <- 17
} else if (outcome =="pneumonia"){
rateCol <- 23
} else {
stop("invalid outcome")
}
## Read outcome data
outcomeOfCare <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## The selected rate column is converted to numeric
outcomeOfCare[, rateCol] <- suppressWarnings(as.numeric(outcomeOfCare[, rateCol]))
## We subset the vector to contain only the hospital name, state and the selected rate
outcomeOfCareSubset <- subset(outcomeOfCare, select = c(Hospital.Name, State, rateCol))
## We sort the vector according to their rate and name in order to sort out ties
outcomeOfCareSubset <- order(outcomeOfCareSubset$State, outcomeOfCareSubset[2], outcomeOfCareSubset$Hospital.Name, na.last = NA)
## We subset the vector to contain only the hospital name, state and the selected rate
outcomeOfCareSubset <- subset(outcomeOfCare, select = c(Hospital.Name, State, rateCol))
outcomeOfCareSubset <- outcomeOfCareSubset[order(outcomeOfCareSubset$State, outcomeOfCareSubset[2], outcomeOfCareSubset$Hospital.Name, na.last = NA)]
outcomeOfCareSubset <- outcomeOfCareSubset[order(outcomeOfCareSubset$State, outcomeOfCareSubset[2], outcomeOfCareSubset$Hospital.Name, na.last = NA),]
head(outcomeOfCareSubset)
outcomeOfCareSubset <- outcomeOfCareSubset[order(outcomeOfCareSubset$State, outcomeOfCareSubset[3], outcomeOfCareSubset$Hospital.Name, na.last = NA),]
head(outcomeOfCareSubset)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
outcomeOfCareSubset
?aggregate
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/best.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/best.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/best.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankhospital.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/rankall.R')
source('C:/Users/jjc/OneDrive/Dokumenter/Kurser/DataScienceCoursera/ProgAssignment3/best.R')
tail(rankall("heart failure"), 10)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
as.character(subset(r, state == "HI"))
r <- rankall("pneumonia", "worst")
r
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
getwd()
dir
dir()
getwd()
setwd(./)
setwd(.\)
setwd(..\)
setwd("..\")
dir()
getwd()
setwd("../")
getwd
getwd()
dir()
setwd("/ProgAssignment3")
setwd("\ProgAssignment3")
setwd("./ProgAssignment3")
dir()
getwd()
ls
ls()
set.seed(123)
library(data.table)
install.packages("data.table")
library(data.table)
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
library(data.table)
DF = data.table(x=rnorm(9), y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF)
DT = data.table(x=rnorm(9), y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT, 3)
dt
DT
tables()
rm(DF)
tables()
DT[2,]
DT[2,1]
DT[2,2]
DT[2,x]
DT[2,y]
data.class(DT)
DT[DT$y="a"]
DT[DT$y="a",]
DT[DT$y=="a",]
DT[, list(mean(x), sum(z))]
DT
DT[,table(y)]
DT[,w:=z^2]
DT
DT[,y:=2]
DT
DT[,m:= {tmp <- (x+z); log2(tmp+5)}]
DT
DT[,a:=x>0]
DT
DT[,b:= mean(x+W),b=a]
DT[,b:= mean(x+w),b=a]
DT
set.seed(123)
DT <- data.table(x=sample(letters[1:3]), 1E5, TRUE)
DT[, .N, b=x]
DT[, .N, by=x]
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[, .N, by=x]
DT <- data.table(x=rep(c("a","b","c"),each=100), y=rnorm(300))
DT
str(DT)
summary(DT)
setkey(DT, x)
DT['a']
